<?php

namespace App\Http\Controllers;

use App\AssessmentEconomicSituation;
use App\AssessmentHousholdProfile;
use App\AssessmentImpairmentType;
use App\AssessmentIndependenceParticipation;
use App\AssessmentItemNeed;
use App\AssessmentNutrition;
use App\AssessmentProtection;
use App\AssessmentPsychosocial;
use App\AssessmentReferral;
use App\AssessmentVulnerabilityType;
use App\Client;
use App\ClientNeed;
use App\VulnerabilityAssessment;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Response;
use Illuminate\Support\Facades\Validator;

class VulnerabilityAssessmentController extends Controller
{
    public function __construct()
    {
        $this->middleware('auth');
    }
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        //
        $assessments =  VulnerabilityAssessment::all();
        return view('assessments.vulnerability.index',compact('assessments'));

    }
    public function getPSNProfile($id)
    {
        $client=Client::findorfail($id);
        return view('assessments.vulnerability.profile',compact('client'));

    }
    public function inclusion()
    {
        //
        
        $assessments =  VulnerabilityAssessment::all();
        return view('assessments.vulnerability.inclusion',compact('assessments'));

    }
    public function showClients()
    {
        return view('assessments.vulnerability.listclients');
    }
    public function getJSonDataSearch()
    {
        //
        $assessments=VulnerabilityAssessment::all();
        $iTotalRecords =count(VulnerabilityAssessment::all());
        $sEcho = intval(10);

        $records = array();
        $records["data"] = array();


        $count=1;
        foreach($assessments as $assessment) {
            $origin="";
            $status="";

            $vcolor="label-danger";


            $records["data"][] = array(
                $count++,
                $assessment->client->client_number,
                $assessment->client->full_name,
                $assessment->client->sex,
                $assessment->client->age,
                '<span class="text-center" id="'.$assessment->id.'">
                                        <a href="#" class="showRecord btn " > <i class="fa fa-eye green "></i> </a>
                                        <a href="#" class=" btn "> <i class="fa fa-print green " onclick="printPage(\''.url('assessments/vulnerability').'/'.$assessment->id.'\');" ></i> </a>
                                        <a href="'.url('vulnerability-assessment/download').'/'.$assessment->id.'" class=" btn  "> <i class="fa fa-download text-danger "></i> </a>
                </span>',
                '<span id="'.$assessment->id.'">
                
                    <a href="#" title="Edit" class="btn btn-icon-only editRecord"> <i class="fa fa-edit text-primary">  </i> </a>
                    <a href="#" title="Delete" class="btn btn-icon-only  deleteRecord"> <i class="fa fa-trash text-danger"></i> </a>
                 </span>',
            );
        }


        $records["draw"] = $sEcho;
        $records["recordsTotal"] = $iTotalRecords;
        $records["recordsFiltered"] = $iTotalRecords;

        echo json_encode($records);
    }
    public function showClientVulnerability($id)
    {
        //
        $client =Client::find($id);

        if(is_object($client->vulAssessment) && count($client->vulAssessment) >0)
        {
            return $this->edit($client->vulAssessment->id);
        }
        else
        {
            return view('assessments.vulnerability.create',compact('client'));
        }
    }

    public function downloadForm($id)
    {
        //
        $assessment=VulnerabilityAssessment::find($id);
        $fo = 'This form is applicable for identification of functional needs of PWDs/PSNs according to the components <br/>of the Global CBR matrix ( Health , Education ,  Livelihood , social and Empowerment ).';
        $pdf = \PDF::loadView('assessments.vulnerability.show', compact('assessment'))
            ->setOption('footer-center', '[page]')
            ->setOption('page-offset', 0)
            ->setOption('disable-smart-shrinking',true)->setOption('zoom','0.78');
        return $pdf->download('Vulnerability_Assessment.pdf');
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
        return view('assessments.vulnerability.create');

    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        //
        try {
            $validator = Validator::make($request->all(), [
                'client_id' => 'required',
                'q1_1' => 'required',
                'q1_2' => 'required',
                'q1_3' => 'required',
                'q1_4' => 'required',
            ]);
            if ($validator->fails()) {
                return Response::json(array(
                    'success' => false,
                    'errors' => $validator->getMessageBag()->toArray()
                ), 400); // 400 being the HTTP code for an invalid request.
            } else {
                $assessment = new VulnerabilityAssessment;
                $assessment->client_id = $request->client_id;
                $assessment->q1_1 = $request->q1_1;
                $assessment->q1_2 = $request->q1_2;
                $assessment->q1_3 = $request->q1_3;
                $assessment->q1_4 = $request->q1_4;
                $assessment->q1_5 = date("Y-m-d", strtotime($request->q1_5));
                $assessment->comments = $request->comments;
                $assessment->created_by=Auth::user()->username;
                $assessment->save();

                $profile = new AssessmentHousholdProfile;
                $profile->assessment_id = $assessment->id;
                $profile->q2_1 = $request->q2_1;
                $profile->q2_2 = $request->q2_2;
                $profile->q2_3 = $request->q2_3;
                $profile->q2_4 = $request->q2_4;
                $profile->q2_5 = $request->q2_5;
                $profile->q2_6 = $request->q2_6;
                $profile->q2_7 = $request->q2_7;
                $profile->q2_8 = $request->q2_8;
                $profile->q2_9 = $request->q2_9;
                $profile->q2_10 = $request->q2_10;
                $profile->q2_11 = $request->q2_11;
                $profile->q2_12 = $request->q2_12;
                $profile->q2_13 = $request->q2_13;
                $profile->q2_14 = $request->q2_14;
                $profile->save();

                $economic = new AssessmentEconomicSituation;
                $economic->assessment_id = $assessment->id;
                $economic->q3_1 = $request->q3_1;
                $economic->q3_2 = $request->q3_2;
                $economic->q3_3 = $request->q3_3;
                $economic->q3_4 = $request->q3_4;
                $economic->q3_5 = $request->q3_5;
                $economic->q3_6 = $request->q3_6;
                $economic->q3_7 = $request->q3_7;
                $economic->q3_8 = $request->q3_8;
                $economic->save();

                $vulnerability = new AssessmentVulnerabilityType;
                $vulnerability->assessment_id = $assessment->id;
                $vulnerability->q4_1 = $request->q4_1;
                $vulnerability->q4_2 = $request->q4_2;
                $vulnerability->q4_3 = $request->q4_3;
                $vulnerability->q4_4 = $request->q4_4;
                $vulnerability->q4_5 = $request->q4_5;
                $vulnerability->q4_6 = $request->q4_6;
                $vulnerability->q4_7 = $request->q4_7;
                $vulnerability->save();

                $impairment = new AssessmentImpairmentType;
                $impairment->assessment_id = $assessment->id;
                $impairment->q5_1 = $request->q5_1;
                $impairment->q5_2 = $request->q5_2;
                $impairment->q5_3 = $request->q5_3;
                $impairment->q5_4 = $request->q5_4;
                $impairment->q5_5 = $request->q5_5;
                $impairment->q5_6 = $request->q5_6;
                $impairment->q5_7 = $request->q5_7;
                $impairment->q5_8 = $request->q5_8;
                $impairment->q5_9 = $request->q5_9;
                $impairment->q5_10 = $request->q5_10;
                $impairment->save();

                $nutrition = new AssessmentNutrition;
                $nutrition->assessment_id = $assessment->id;
                $nutrition->q6_1 = $request->q6_1;
                $nutrition->q6_2 = $request->q6_2;
                $nutrition->q6_3 = $request->q6_3;
                $nutrition->save();

                $participation = new AssessmentIndependenceParticipation;
                $participation->assessment_id = $assessment->id;
                $participation->q7_1 = $request->q7_1;
                $participation->q7_2 = $request->q7_2;
                $participation->q7_3 = $request->q7_3;
                $participation->q7_4 = $request->q7_4;
                $participation->q7_5 = $request->q7_5;
                $participation->q7_6 = $request->q7_6;
                $participation->q7_7 = $request->q7_7;
                $participation->q7_8 = $request->q7_8;
                $participation->save();

                $psychosocial = new AssessmentPsychosocial;
                $psychosocial->assessment_id = $assessment->id;
                $psychosocial->q8_1 = $request->q8_1;
                $psychosocial->q8_2 = $request->q8_2;
                $psychosocial->q8_3 = $request->q8_3;
                $psychosocial->q8_4 = $request->q8_4;
                $psychosocial->q8_5 = $request->q8_5;
                $psychosocial->q8_6 = $request->q8_6;
                $psychosocial->q8_7 = $request->q8_7;
                $psychosocial->q8_8 = $request->q8_8;
                $psychosocial->save();

                $protection = new AssessmentProtection;
                $protection->assessment_id = $assessment->id;
                $protection->q9_1 = $request->q9_1;
                $protection->q9_2 = $request->q9_2;
                $protection->q9_3 = $request->q9_3;
                $protection->q9_4 = $request->q9_4;
                $protection->q9_5 = $request->q9_5;
                $protection->q9_6 = $request->q9_6;
                $protection->q9_7 = $request->q9_7;
                $protection->q9_8 = $request->q9_8;
                $protection->save();

                $need_count=0;
                foreach ($request->need_id as $need_id){

                    $cl_need=new ClientNeed;
                    $cl_need->need_id = $need_id;
                    $cl_need->status = $request->status[$need_count];
                    $cl_need->location = $request->location[$need_count];
                    $cl_need->assessment_id = $assessment->id;
                    $cl_need->client_id=$assessment->client_id;
                    $cl_need->save();
                    $need_count++;
                }

                return response()->json([
                    'success' => true,
                    'message' => " Record saved"
                ], 200);
            }
        }
        catch (\Exception $ex)
        {
            return Response::json(array(
                'success' => false,
                'errors' => $ex->getMessage()
            ), 400); // 400 being the HTTP code for an invalid request.
        }

    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
        $assessment=VulnerabilityAssessment::find($id);
        return view('assessments.vulnerability.show',compact('assessment'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
        $assessment=VulnerabilityAssessment::find($id);
        return view('assessments.vulnerability.edit',compact('assessment'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function clearAssessment($assessment)
    {
        if(is_object($assessment->householdProfile) && $assessment->householdProfile != null)
        {
            $assessment->householdProfile->delete();
        }
        if(is_object($assessment->economicSituation) && $assessment->economicSituation != null)
        {
            $assessment->economicSituation->delete();
        }
        if(is_object($assessment->vulnerabilityType) && $assessment->vulnerabilityType != null)
        {
            $assessment->vulnerabilityType->delete();
        }
        if(is_object($assessment->impairmentType) && $assessment->impairmentType != null)
        {
            $assessment->impairmentType->delete();
        }
        if(is_object($assessment->nutrition) && $assessment->nutrition != null)
        {
            $assessment->nutrition->delete();
        }
        if(is_object($assessment->independenceParticipation) && $assessment->independenceParticipation != null)
        {
            $assessment->independenceParticipation->delete();
        }
        if(is_object($assessment->psychosocial) && $assessment->psychosocial != null)
        {
            $assessment->psychosocial->delete();
        }
        if(is_object($assessment->protection) && $assessment->protection != null)
        {
            $assessment->protection->delete();
        }
        if(is_object($assessment->itemsNeeds) && $assessment->itemsNeeds != null)
        {
            $assessment->itemsNeeds->delete();
        }
        if(is_object($assessment->referral) && $assessment->referral != null)
        {
            $assessment->referral->delete();
        }
    }
    public function update(Request $request, $id)
    {
        //
        try {
            $validator = Validator::make($request->all(), [
                'q1_1' => 'required',
                'q1_2' => 'required',
                'q1_3' => 'required',
                'q1_4' => 'required',
            ]);
            if ($validator->fails()) {
                return Response::json(array(
                    'success' => false,
                    'errors' => $validator->getMessageBag()->toArray()
                ), 400); // 400 being the HTTP code for an invalid request.
            } else {
        $assessment =  VulnerabilityAssessment::find($id);
        $assessment->q1_1 = $request->q1_1;
        $assessment->q1_2 = $request->q1_2;
        $assessment->q1_3 = $request->q1_3;
        $assessment->q1_4 = $request->q1_4;
        $assessment->q1_5 = date("Y-m-d", strtotime($request->q1_5));
        $assessment->comments = $request->comments;
        $assessment->save();

        $this->clearAssessment($assessment);

        $profile = new AssessmentHousholdProfile;
        $profile->assessment_id = $assessment->id;
        $profile->q2_1 = $request->q2_1;
        $profile->q2_2 = $request->q2_2;
        $profile->q2_3 = $request->q2_3;
        $profile->q2_4 = $request->q2_4;
        $profile->q2_5 = $request->q2_5;
        $profile->q2_6 = $request->q2_6;
        $profile->q2_7 = $request->q2_7;
        $profile->q2_8 = $request->q2_8;
        $profile->q2_9 = $request->q2_9;
        $profile->q2_10 = $request->q2_10;
        $profile->q2_11 = $request->q2_11;
        $profile->q2_12 = $request->q2_12;
        $profile->q2_13 = $request->q2_13;
        $profile->q2_14 = $request->q2_14;
        $profile->save();

        $economic = new AssessmentEconomicSituation;
        $economic->assessment_id = $assessment->id;
        $economic->q3_1 = $request->q3_1;
        $economic->q3_2 = $request->q3_2;
        $economic->q3_3 = $request->q3_3;
        $economic->q3_4 = $request->q3_4;
        $economic->q3_5 = $request->q3_5;
        $economic->q3_6 = $request->q3_6;
        $economic->q3_7 = $request->q3_7;
        $economic->q3_8 = $request->q3_8;
        $economic->save();

        $vulnerability = new AssessmentVulnerabilityType;
        $vulnerability->assessment_id = $assessment->id;
        $vulnerability->q4_1 = $request->q4_1;
        $vulnerability->q4_2 = $request->q4_2;
        $vulnerability->q4_3 = $request->q4_3;
        $vulnerability->q4_4 = $request->q4_4;
        $vulnerability->q4_5 = $request->q4_5;
        $vulnerability->q4_6 = $request->q4_6;
        $vulnerability->q4_7 = $request->q4_7;
        $vulnerability->save();

        $impairment = new AssessmentImpairmentType;
        $impairment->assessment_id = $assessment->id;
        $impairment->q5_1 = $request->q5_1;
        $impairment->q5_2 = $request->q5_2;
        $impairment->q5_3 = $request->q5_3;
        $impairment->q5_4 = $request->q5_4;
        $impairment->q5_5 = $request->q5_5;
        $impairment->q5_6 = $request->q5_6;
        $impairment->q5_7 = $request->q5_7;
        $impairment->q5_8 = $request->q5_8;
        $impairment->q5_9 = $request->q5_9;
        $impairment->q5_10 = $request->q5_10;
        $impairment->save();

        $nutrition = new AssessmentNutrition;
        $nutrition->assessment_id = $assessment->id;
        $nutrition->q6_1 = $request->q6_1;
        $nutrition->q6_2 = $request->q6_2;
        $nutrition->q6_3 = $request->q6_3;
        $nutrition->save();

        $participation = new AssessmentIndependenceParticipation;
        $participation->assessment_id = $assessment->id;
        $participation->q7_1 = $request->q7_1;
        $participation->q7_2 = $request->q7_2;
        $participation->q7_3 = $request->q7_3;
        $participation->q7_4 = $request->q7_4;
        $participation->q7_5 = $request->q7_5;
        $participation->q7_6 = $request->q7_6;
        $participation->q7_7 = $request->q7_7;
        $participation->q7_8 = $request->q7_8;
        $participation->save();

        $psychosocial = new AssessmentPsychosocial;
        $psychosocial->assessment_id = $assessment->id;
        $psychosocial->q8_1 = $request->q8_1;
        $psychosocial->q8_2 = $request->q8_2;
        $psychosocial->q8_3 = $request->q8_3;
        $psychosocial->q8_4 = $request->q8_4;
        $psychosocial->q8_5 = $request->q8_5;
        $psychosocial->q8_6 = $request->q8_6;
        $psychosocial->q8_7 = $request->q8_7;
        $psychosocial->q8_8 = $request->q8_8;
        $psychosocial->save();

        $protection = new AssessmentProtection;
        $protection->assessment_id = $assessment->id;
        $protection->q9_1 = $request->q9_1;
        $protection->q9_2 = $request->q9_2;
        $protection->q9_3 = $request->q9_3;
        $protection->q9_4 = $request->q9_4;
        $protection->q9_5 = $request->q9_5;
        $protection->q9_6 = $request->q9_6;
        $protection->q9_7 = $request->q9_7;
        $protection->q9_8 = $request->q9_8;
        $protection->save();

        $needs = new AssessmentItemNeed;
        $needs->assessment_id = $assessment->id;
        $needs->q10_1 = $request->q10_1;
        $needs->q10_2 = $request->q10_2;
        $needs->q10_3 = $request->q10_3;
        $needs->q10_4 = $request->q10_4;
        $needs->q10_5 = $request->q10_5;
        $needs->q10_6 = $request->q10_6;
        $needs->q10_7 = $request->q10_7;
        $needs->q10_8 = $request->q10_8;
        $needs->q10_9 = $request->q10_9;
        $needs->q10_10 = $request->q10_10;
        $needs->q10_11 = $request->q10_11;
        $needs->q10_12 = $request->q10_12;
        $needs->q10_13 = $request->q10_13;
        $needs->q10_14 = $request->q10_14;
        $needs->q10_15 = $request->q10_15;
        $needs->q10_16 = $request->q10_16;
        $needs->q10_17 = $request->q10_17;
        $needs->q10_18 = $request->q10_18;
        $needs->q10_19 = $request->q10_19;
        $needs->q10_20 = $request->q10_20;
        $needs->q10_21 = $request->q10_21;
        $needs->q10_22 = $request->q10_22;
        $needs->q10_23 = $request->q10_23;
        $needs->q10_24 = $request->q10_24;
        $needs->q10_25 = $request->q10_25;
        $needs->q10_26 = $request->q10_26;
        $needs->save();

        $referral = new AssessmentReferral;
        $referral->assessment_id = $assessment->id;
        $referral->q11_1 = $request->q11_1;
        $referral->q11_2 = $request->q11_2;
        $referral->q11_3 = $request->q11_3;
        $referral->q11_4 = $request->q11_4;
        $referral->q11_5 = $request->q11_5;
        $referral->q11_6 = $request->q11_6;
        $referral->save();

                return response()->json([
                    'success' => true,
                    'message' => " Record saved"
                ], 200);
            }
        }
        catch (\Exception $ex)
        {
            return Response::json(array(
                'success' => false,
                'errors' => $ex->getMessage()
            ), 400); // 400 being the HTTP code for an invalid request.
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }
}
